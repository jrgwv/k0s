name: Go build

on:
  push:
    branches:
      - main
      - release-*
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '**.md'
      - LICENSE
      - '**.svg'
      - '.github/workflows/docs.yml'
      - '.github/workflows/mkdocs-set-default-version.yml'
      - 'mkdocs.yml'
  pull_request:
    branches:
      - main
      - release-*
    paths-ignore:
      - 'docs/**'
      - 'examples/**'
      - '**.md'
      - LICENSE
      - '**.svg'
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Get PR Reference and Set Cache Name
        run: |
          PR_NUMBER=$(echo ${GITHUB_REF} | cut -d / -f 3 )
          echo "cachePrefix=k0s-${PR_NUMBER}-${{ github.sha }}" >> $GITHUB_ENV
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.13
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - uses: actions/cache@v2
        name: Go modules cache
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Bindata
        uses: actions/cache@v2
        id: generated-bindata
        with:
          path: |
            .bins.stamp
            embedded-bins/staging/linux/bin/
            bindata
            pkg/assets/zz_generated_offsets.go

          key: ${{ runner.os }}-embedded-bins-${{ hashFiles('**/embedded-bins/**/*') }}
          restore-keys: |
            ${{ runner.os }}-embedded-bins-${{ hashFiles('**/embedded-bins/**/*') }}

      - name: Run unit tests
        run: make check-unit

      - name: Build
        run: make build

      - name: Cache compiled binary for further testing
        uses: actions/cache@v2
        id: cache-compiled-binary
        with:
          path: |
            k0s
          key: build-${{env.cachePrefix}}

  smoketest:
    name: Smoke test
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Get PR Reference and Set Cache Name
        run: |
          PR_NUMBER=$(echo ${GITHUB_REF} | cut -d / -f 3 )
          echo "cachePrefix=k0s-${PR_NUMBER}-${{ github.sha }}" >> $GITHUB_ENV
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Cache compiled binary for smoke testing
        uses: actions/cache@v2
        id: restore-compiled-binary
        with:
          path: |
            k0s
          key: build-${{env.cachePrefix}}

      - name: Run test .
        run: make -C inttest check-basic

      - name: Collect test logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          path: |
            /tmp/*.log


  smoketest-hacontrolplane:
    name: Smoke test for HA controlplane operations
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Get PR Reference and Set Cache Name
        run: |
          PR_NUMBER=$(echo ${GITHUB_REF} | cut -d / -f 3 )
          echo "cachePrefix=k0s-${PR_NUMBER}-${{ github.sha }}" >> $GITHUB_ENV
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Cache compiled binary for smoke testing
        uses: actions/cache@v2
        id: restore-compiled-binary
        with:
          path: |
            k0s
          key: build-${{env.cachePrefix}}

      - name: Run hacontrolplane test .
        run: make -C inttest check-hacontrolplane

      - name: Collect test logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          path: |
            /tmp/*.log

  smoketest-byocri:
    name: Smoke test for BYO CRI feature
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Get PR Reference and Set Cache Name
        run: |
          PR_NUMBER=$(echo ${GITHUB_REF} | cut -d / -f 3 )
          echo "cachePrefix=k0s-${PR_NUMBER}-${{ github.sha }}" >> $GITHUB_ENV
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Cache compiled binary for smoke testing
        uses: actions/cache@v2
        id: restore-compiled-binary
        with:
          path: |
            k0s
          key: build-${{env.cachePrefix}}

      - name: Run BYO CRI test .
        run: make -C inttest check-byocri

      - name: Collect test logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          path: |
            /tmp/*.log

  smoketest-addons:
    name: Smoke test for helm based addons
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Get PR Reference and Set Cache Name
        run: |
          PR_NUMBER=$(echo ${GITHUB_REF} | cut -d / -f 3 )
          echo "cachePrefix=k0s-${PR_NUMBER}-${{ github.sha }}" >> $GITHUB_ENV
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Cache compiled binary for smoke testing
        uses: actions/cache@v2
        id: restore-compiled-binary
        with:
          path: |
            k0s
          key: build-${{env.cachePrefix}}

      - name: Run Helm addon test
        run: make -C inttest check-addons

      - name: Collect test logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          path: |
            /tmp/*.log

  smoketest-singlenode:
    name: Smoke test for single node k0s
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Get PR Reference and Set Cache Name
        run: |
          PR_NUMBER=$(echo ${GITHUB_REF} | cut -d / -f 3 )
          echo "cachePrefix=k0s-${PR_NUMBER}-${{ github.sha }}" >> $GITHUB_ENV
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Cache compiled binary for smoke testing
        uses: actions/cache@v2
        id: restore-compiled-binary
        with:
          path: |
            k0s
          key: build-${{env.cachePrefix}}

      - name: Run singlenode test
        run: make -C inttest check-singlenode

      - name: Collect test logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          path: |
            /tmp/*.log

  smoketest-kine:
    name: Smoke test for kine backed
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Get PR Reference and Set Cache Name
        run: |
          PR_NUMBER=$(echo ${GITHUB_REF} | cut -d / -f 3 )
          echo "cachePrefix=k0s-${PR_NUMBER}-${{ github.sha }}" >> $GITHUB_ENV
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Cache compiled binary for smoke testing
        uses: actions/cache@v2
        id: restore-compiled-binary
        with:
          path: |
            k0s
          key: build-${{env.cachePrefix}}

      - name: Run kine test
        run: make -C inttest check-kine

      - name: Collect test logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          path: |
            /tmp/*.log


  smoketest-network:
    name: Smoke test for network
    needs: build
    runs-on: ubuntu-latest
    if: false

    steps:
      - name: Get PR Reference and Set Cache Name
        run: |
          PR_NUMBER=$(echo ${GITHUB_REF} | cut -d / -f 3 )
          echo "cachePrefix=k0s-${PR_NUMBER}-${{ github.sha }}" >> $GITHUB_ENV
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Cache compiled binary for smoke testing
        uses: actions/cache@v2
        id: restore-compiled-binary
        with:
          path: |
            k0s
          key: build-${{env.cachePrefix}}

      - name: Run smoke test .
        run: make -C inttest check-etcd

      - name: Collect test logs
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          path: |
            /tmp/*.log

  lint:
    name: Lint
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2

      - name: codegen
        run: make pkg/assets/zz_generated_offsets.go
        env:
          EMBEDDED_BINS_BUILDMODE: none

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29
          config: .golangci.yml
